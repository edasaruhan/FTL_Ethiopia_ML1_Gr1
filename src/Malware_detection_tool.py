# Importing Required Libraries
import os
from threading import Thread
import pefile
import array
import math
import pickle
import joblib
import sys
from PyQt5 import QtWidgets
from PyQt5.QtWidgets import QApplication, QDialog, QFileDialog
from PyQt5.uic import loadUi
import win10toast

# Entropy Function
def get_entropy(data):
    if len(data) == 0:
        return 0.0
    occurences = array.array('L', [0]*256)
    for x in data:
        occurences[x if isinstance(x, int) else ord(x)] += 1

    entropy = 0
    for x in occurences:
        if x:
            p_x = float(x) / len(data)
            entropy -= p_x*math.log(p_x, 2)

    return entropy

# Function to Extract Resources
def get_resources(pe):
    resources = []
    if hasattr(pe, 'DIRECTORY_ENTRY_RESOURCE'):
        try:
            for resource_type in pe.DIRECTORY_ENTRY_RESOURCE.entries:
                if hasattr(resource_type, 'directory'):
                    for resource_id in resource_type.directory.entries:
                        if hasattr(resource_id, 'directory'):
                            for resource_lang in resource_id.directory.entries:
                                data = pe.get_data(resource_lang.data.struct.OffsetToData, resource_lang.data.struct.Size)
                                size = resource_lang.data.struct.Size
                                entropy = get_entropy(data)
                                resources.append([entropy, size])
        except Exception as e:
            return resources
    return resources

# Function to Get Info of each Resource
def get_version_info(pe):
    res = {}
    for fileinfo in pe.FileInfo:
        if fileinfo.Key == 'StringFileInfo':
            for st in fileinfo.StringTable:
                for entry in st.entries.items():
                    res[entry[0]] = entry[1]
        if fileinfo.Key == 'VarFileInfo':
            for var in fileinfo.Var:
                res[var.entry.items()[0][0]] = var.entry.items()[0][1]
    if hasattr(pe, 'VS_FIXEDFILEINFO'):
          res['flags'] = pe.VS_FIXEDFILEINFO.FileFlags
          res['os'] = pe.VS_FIXEDFILEINFO.FileOS
          res['type'] = pe.VS_FIXEDFILEINFO.FileType
          res['file_version'] = pe.VS_FIXEDFILEINFO.FileVersionLS
          res['product_version'] = pe.VS_FIXEDFILEINFO.ProductVersionLS
          res['signature'] = pe.VS_FIXEDFILEINFO.Signature
          res['struct_version'] = pe.VS_FIXEDFILEINFO.StrucVersion
    return res

# Function to Extract Infos
def extract_infos(fpath):
    res = {}
    pe = pefile.PE(fpath)
    res['Machine'] = pe.FILE_HEADER.Machine
    res['SizeOfOptionalHeader'] = pe.FILE_HEADER.SizeOfOptionalHeader
    res['Characteristics'] = pe.FILE_HEADER.Characteristics
    res['MajorLinkerVersion'] = pe.OPTIONAL_HEADER.MajorLinkerVersion
    res['MinorLinkerVersion'] = pe.OPTIONAL_HEADER.MinorLinkerVersion
    res['SizeOfCode'] = pe.OPTIONAL_HEADER.SizeOfCode
    res['SizeOfInitializedData'] = pe.OPTIONAL_HEADER.SizeOfInitializedData
    res['SizeOfUninitializedData'] = pe.OPTIONAL_HEADER.SizeOfUninitializedData
    res['AddressOfEntryPoint'] = pe.OPTIONAL_HEADER.AddressOfEntryPoint
    res['BaseOfCode'] = pe.OPTIONAL_HEADER.BaseOfCode
    try:
        res['BaseOfData'] = pe.OPTIONAL_HEADER.BaseOfData
    except AttributeError:
        res['BaseOfData'] = 0
    res['ImageBase'] = pe.OPTIONAL_HEADER.ImageBase
    res['SectionAlignment'] = pe.OPTIONAL_HEADER.SectionAlignment
    res['FileAlignment'] = pe.OPTIONAL_HEADER.FileAlignment
    res['MajorOperatingSystemVersion'] = pe.OPTIONAL_HEADER.MajorOperatingSystemVersion
    res['MinorOperatingSystemVersion'] = pe.OPTIONAL_HEADER.MinorOperatingSystemVersion
    res['MajorImageVersion'] = pe.OPTIONAL_HEADER.MajorImageVersion
    res['MinorImageVersion'] = pe.OPTIONAL_HEADER.MinorImageVersion
    res['MajorSubsystemVersion'] = pe.OPTIONAL_HEADER.MajorSubsystemVersion
    res['MinorSubsystemVersion'] = pe.OPTIONAL_HEADER.MinorSubsystemVersion
    res['SizeOfImage'] = pe.OPTIONAL_HEADER.SizeOfImage
    res['SizeOfHeaders'] = pe.OPTIONAL_HEADER.SizeOfHeaders
    res['CheckSum'] = pe.OPTIONAL_HEADER.CheckSum
    res['Subsystem'] = pe.OPTIONAL_HEADER.Subsystem
    res['DllCharacteristics'] = pe.OPTIONAL_HEADER.DllCharacteristics
    res['SizeOfStackReserve'] = pe.OPTIONAL_HEADER.SizeOfStackReserve
    res['SizeOfStackCommit'] = pe.OPTIONAL_HEADER.SizeOfStackCommit
    res['SizeOfHeapReserve'] = pe.OPTIONAL_HEADER.SizeOfHeapReserve
    res['SizeOfHeapCommit'] = pe.OPTIONAL_HEADER.SizeOfHeapCommit
    res['LoaderFlags'] = pe.OPTIONAL_HEADER.LoaderFlags
    res['NumberOfRvaAndSizes'] = pe.OPTIONAL_HEADER.NumberOfRvaAndSizes

    # Sections
    res['SectionsNb'] = len(pe.sections)
    entropy = list(map(lambda x:x.get_entropy(), pe.sections))
    s = len(entropy)
    res['SectionsMeanEntropy'] = sum(entropy)/float(s) if s > 0 else 0
    res['SectionsMinEntropy'] = min(entropy, default=0)
    res['SectionsMaxEntropy'] = max(entropy, default=0)
    raw_sizes = list(map(lambda x:x.SizeOfRawData, pe.sections))
    t = len(raw_sizes)
    res['SectionsMeanRawsize'] = sum(raw_sizes)/float(t) if t > 0 else 0
    res['SectionsMinRawsize'] = min(raw_sizes, default=0)
    res['SectionsMaxRawsize'] = max(raw_sizes, default=0)
    virtual_sizes = list(map(lambda x:x.Misc_VirtualSize, pe.sections))
    u = len(virtual_sizes)
    res['SectionsMeanVirtualsize'] = sum(virtual_sizes)/float(u) if u > 0 else 0
    res['SectionsMinVirtualsize'] = min(virtual_sizes, default=0)
    res['SectionMaxVirtualsize'] = max(virtual_sizes, default=0)

    # Imports
    try:
        res['ImportsNbDLL'] = len(pe.DIRECTORY_ENTRY_IMPORT)
        imports = sum([x.imports for x in pe.DIRECTORY_ENTRY_IMPORT], [])
        res['ImportsNb'] = len(imports)
        v = list(filter(lambda x:x.name is None, imports))
        res['ImportsNbOrdinal'] = len(v)
    except AttributeError:
        res['ImportsNbDLL'] = 0
        res['ImportsNb'] = 0
        res['ImportsNbOrdinal'] = 0

    # Exports
    try:
        res['ExportNb'] = len(pe.DIRECTORY_ENTRY_EXPORT.symbols)
    except AttributeError:
        res['ExportNb'] = 0
        
    # Resources
    resources = get_resources(pe)
    res['ResourcesNb'] = len(resources)
    if len(resources) > 0:
        entropy = list(map(lambda x:x[0], resources))
        w = len(entropy)
        res['ResourcesMeanEntropy'] = sum(entropy)/float(w) if w > 0 else 0
        res['ResourcesMinEntropy'] = min(entropy, default=0)
        res['ResourcesMaxEntropy'] = max(entropy, default=0)
        sizes = list(map(lambda x:x[1], resources))
        p = len(sizes)
        res['ResourcesMeanSize'] = sum(sizes)/float(p) if p > 0 else 0
        res['ResourcesMinSize'] = min(sizes, default=0)
        res['ResourcesMaxSize'] = max(sizes, default=0)
    else:
        res['ResourcesNb'] = 0
        res['ResourcesMeanEntropy'] = 0
        res['ResourcesMinEntropy'] = 0
        res['ResourcesMaxEntropy'] = 0
        res['ResourcesMeanSize'] = 0
        res['ResourcesMinSize'] = 0
        res['ResourcesMaxSize'] = 0

    # Load configuration size
    try:
        res['LoadConfigurationSize'] = pe.DIRECTORY_ENTRY_LOAD_CONFIG.struct.Size
    except AttributeError:
        res['LoadConfigurationSize'] = 0

    # Version configuration size
    try:
        version_infos = get_version_info(pe)
        res['VersionInformationSize'] = len(version_infos.keys())
    except AttributeError:
        res['VersionInformationSize'] = 0
    return res

class MyWindow(QDialog):
    def __init__(self):
        super(MyWindow, self).__init__()
        width = 700
        height = 400
        self.setGeometry(550, 200, width, height)
        self.setWindowTitle("Malware Detection Tool")
        self.setStyleSheet('background-color: #262D37;')
        self.initUI()

    def initUI(self):
        self.lbl_Title = QtWidgets.QLabel(self)
        self.lbl_Title.setText("Welcome to Malware Detection Tool")
        self.lbl_Title.move(70, 50)
        self.lbl_Title.setStyleSheet('color: pink; font-size: 28px; font-weight: bold')

        # Result label
        self.lbl_result = QtWidgets.QLabel(self)
        self.lbl_result.move(150, 120)
        self.lbl_result.resize(400, 30)
        self.lbl_result.setStyleSheet('color: white; font-size: 16px;')

        # Button for file browse
        btn = QtWidgets.QPushButton('Browse Files', self)
        btn.resize(250, 75)
        btn.clicked.connect(self.file_browse)
        btn.move(150, 170) 
        btn.setStyleSheet('''
            background: pink;
            font-size: 20px; 
            border: 2px solid purple;  
            font-weight: bold;
            border-radius: 75px;
        ''')

    def file_browse(self):
        filepaths, _ = QFileDialog.getOpenFileNames(
            self,
            'Select Executable Files',
            "C:\\Users\\Getcho\\Downloads\\Programs",
            "Executable Files (*.exe)"
        )

        if not filepaths:
            return

        try:
            clf = joblib.load("../model/classifier.pkl")
            features = pickle.loads(open("../model/features.pkl", 'rb').read())
        except Exception as e:
            self.show_error(f"Failed to load model: {str(e)}")
            return

        for file_path in filepaths:
            try:
                data = extract_infos(file_path)
                pe_features = [data[x] for x in features]
                res = clf.predict([pe_features])[0]
                
                filename = os.path.basename(file_path)
                result_text = f"{filename} - {'MALICIOUS SOFTWARE' if res else 'SAFE SOFTWARE'}"
                print('...............................................')
                print(result_text)
                print('................................................')
                
                self.lbl_result.setText(result_text)
                
                # Show toast notification
                toaster = win10toast.ToastNotifier()
                icon_path = "Delete.ico" if res else "Safe.ico"  # Update these paths
                toaster.show_toast(
                    'Malware Detector Tool',
                    result_text,
                    duration=10,
                    icon_path=icon_path
                )
                
            except Exception as e:
                error_msg = f"Error processing {os.path.basename(file_path)}: {str(e)}"
                print(error_msg)
                self.show_error(error_msg)

    def show_error(self, message):
        toaster = win10toast.ToastNotifier()
        toaster.show_toast(
            'Malware Detector Tool',
            message,
            duration=10,
            icon_path="Error.ico"  # Update this path
        )

def main():
    app = QApplication(sys.argv)
    win = MyWindow()
    win.show()
    sys.exit(app.exec_())

if __name__ == '__main__':
    main()